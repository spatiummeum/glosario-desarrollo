#!/usr/bin/env python3
"""
Script para generar estad√≠sticas del Glosario de Programaci√≥n
"""

import re
import json
from datetime import datetime
from pathlib import Path

def count_terms_in_section(content, section_emoji):
    """Cuenta los t√©rminos en una secci√≥n espec√≠fica"""
    pattern = f"## {section_emoji}.*?(?=## |$)"
    section_match = re.search(pattern, content, re.DOTALL)
    
    if section_match:
        section_content = section_match.group(0)
        terms = re.findall(r"### (?!.*üìö)", section_content)
        return len(terms)
    return 0

def count_code_examples(content):
    """Cuenta los ejemplos de c√≥digo por lenguaje"""
    languages = {
        'javascript': len(re.findall(r'```javascript', content, re.IGNORECASE)),
        'python': len(re.findall(r'```python', content, re.IGNORECASE)),
        'html': len(re.findall(r'```html', content, re.IGNORECASE)),
        'css': len(re.findall(r'```css', content, re.IGNORECASE)),
        'bash': len(re.findall(r'```bash', content, re.IGNORECASE)),
        'json': len(re.findall(r'```json', content, re.IGNORECASE)),
    }
    return languages

def analyze_content_quality(content):
    """Analiza la calidad del contenido"""
    # Contar definiciones
    definitions = len(re.findall(r'\*\*Definici√≥n:\*\*', content))
    
    # Contar ejemplos pr√°cticos
    examples = len(re.findall(r'\*\*Ejemplo:\*\*', content))
    
    # Contar ejemplos de c√≥digo
    code_examples = len(re.findall(r'```\w+', content))
    
    # Calcular ratio de calidad
    quality_ratio = {
        'definitions_per_term': 0,
        'examples_per_term': 0,
        'code_per_term': 0
    }
    
    total_terms = len(re.findall(r'### (?!.*üìö)', content))
    
    if total_terms > 0:
        quality_ratio['definitions_per_term'] = round(definitions / total_terms, 2)
        quality_ratio['examples_per_term'] = round(examples / total_terms, 2)
        quality_ratio['code_per_term'] = round(code_examples / total_terms, 2)
    
    return quality_ratio

def generate_stats():
    """Genera las estad√≠sticas completas del glosario"""
    
    # Buscar archivo README.md
    readme_paths = [
        Path('README.md'),
        Path('../README.md'),
        Path('../../README.md')
    ]
    
    readme_path = None
    for path in readme_paths:
        if path.exists():
            readme_path = path
            break
    
    if not readme_path:
        print("‚ùå No se encontr√≥ el archivo README.md")
        return
    
    # Leer contenido
    with open(readme_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Estad√≠sticas b√°sicas
    total_terms = len(re.findall(r'### (?!.*üìö)', content))
    total_words = len(content.split())
    total_chars = len(content)
    
    # T√©rminos por categor√≠a
    categories = {
        'Conceptos Fundamentales': count_terms_in_section(content, 'üèõÔ∏è'),
        'POO': count_terms_in_section(content, 'üì¶'),
        'Web y Redes': count_terms_in_section(content, 'üåê'),
        'Hardware y Sistemas': count_terms_in_section(content, 'üñ•Ô∏è'),
        'Tipos de Datos': count_terms_in_section(content, 'üßÆ'),
        'Sintaxis de C√≥digo': count_terms_in_section(content, '‚úçÔ∏è'),
        'Seguridad y Errores': count_terms_in_section(content, 'üêõ')
    }
    
    # Ejemplos de c√≥digo
    code_examples = count_code_examples(content)
    total_code_examples = sum(code_examples.values())
    
    # An√°lisis de calidad
    quality = analyze_content_quality(content)
    
    # Estad√≠sticas compiladas
    stats = {
        'general': {
            'total_terms': total_terms,
            'total_words': total_words,
            'total_characters': total_chars,
            'average_words_per_term': round(total_words / total_terms, 2) if total_terms > 0 else 0,
            'last_updated': datetime.now().isoformat()
        },
        'categories': categories,
        'code_examples': {
            'by_language': code_examples,
            'total': total_code_examples,
            'average_per_term': round(total_code_examples / total_terms, 2) if total_terms > 0 else 0
        },
        'quality_metrics': quality,
        'coverage': {
            'terms_with_definitions': len(re.findall(r'\*\*Definici√≥n:\*\*', content)),
            'terms_with_examples': len(re.findall(r'\*\*Ejemplo:\*\*', content)),
            'terms_with_code': len(re.findall(r'```\w+.*?```', content, re.DOTALL))
        }
    }
    
    return stats

def display_stats(stats):
    """Muestra las estad√≠sticas de forma legible"""
    
    print("üìä ESTAD√çSTICAS DEL GLOSARIO DE PROGRAMACI√ìN")
    print("=" * 50)
    
    # Estad√≠sticas generales
    general = stats['general']
    print(f"\nüìà GENERALES:")
    print(f"   üìñ Total de t√©rminos: {general['total_terms']}")
    print(f"   üìù Total de palabras: {general['total_words']:,}")
    print(f"   üìÑ Total de caracteres: {general['total_characters']:,}")
    print(f"   üìä Promedio palabras por t√©rmino: {general['average_words_per_term']}")
    
    # T√©rminos por categor√≠a
    categories = stats['categories']
    print(f"\nüè∑Ô∏è POR CATEGOR√çA:")
    for category, count in categories.items():
        percentage = round((count / general['total_terms']) * 100, 1) if general['total_terms'] > 0 else 0
        print(f"   {category}: {count} t√©rminos ({percentage}%)")
    
    # Ejemplos de c√≥digo
    code = stats['code_examples']
    print(f"\nüíª EJEMPLOS DE C√ìDIGO:")
    print(f"   Total: {code['total']} ejemplos")
    print(f"   Promedio por t√©rmino: {code['average_per_term']}")
    for lang, count in code['by_language'].items():
        if count > 0:
            print(f"   {lang.capitalize()}: {count}")
    
    # M√©tricas de calidad
    quality = stats['quality_metrics']
    print(f"\n‚≠ê CALIDAD DEL CONTENIDO:")
    print(f"   Definiciones por t√©rmino: {quality['definitions_per_term']}")
    print(f"   Ejemplos por t√©rmino: {quality['examples_per_term']}")
    print(f"   C√≥digo por t√©rmino: {quality['code_per_term']}")
    
    # Cobertura
    coverage = stats['coverage']
    print(f"\nüìã COBERTURA:")
    print(f"   T√©rminos con definici√≥n: {coverage['terms_with_definitions']}")
    print(f"   T√©rminos con ejemplo: {coverage['terms_with_examples']}")
    print(f"   T√©rminos con c√≥digo: {coverage['terms_with_code']}")
    
    print(f"\nüïí √öltima actualizaci√≥n: {general['last_updated']}")

def main():
    """Funci√≥n principal"""
    try:
        stats = generate_stats()
        if stats:
            display_stats(stats)
            
            # Guardar en archivo JSON
            with open('glosario-stats.json', 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
            
            print(f"\n‚úÖ Estad√≠sticas guardadas en: glosario-stats.json")
        
    except Exception as e:
        print(f"‚ùå Error al generar estad√≠sticas: {e}")

if __name__ == "__main__":
    main()
